package com.hxd.gobus.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hxd.gobus.bean.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, Integer.class, "personId", false, "PERSON_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property UnitName = new Property(3, String.class, "unitName", false, "UNIT_NAME");
        public final static Property TechnicalPost = new Property(4, String.class, "technicalPost", false, "TECHNICAL_POST");
        public final static Property WorkNo = new Property(5, String.class, "workNo", false, "WORK_NO");
        public final static Property MobilePhone = new Property(6, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property FirstLetter = new Property(8, String.class, "firstLetter", false, "FIRST_LETTER");
        public final static Property PhotoUrl = new Property(9, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property NamePinyin = new Property(10, String.class, "namePinyin", false, "NAME_PINYIN");
        public final static Property DeptPinyin = new Property(11, String.class, "deptPinyin", false, "DEPT_PINYIN");
        public final static Property CardNo = new Property(12, String.class, "cardNo", false, "CARD_NO");
        public final static Property UnitId = new Property(13, Integer.class, "unitId", false, "UNIT_ID");
    }


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PERSON_ID\" INTEGER," + // 1: personId
                "\"NAME\" TEXT," + // 2: name
                "\"UNIT_NAME\" TEXT," + // 3: unitName
                "\"TECHNICAL_POST\" TEXT," + // 4: technicalPost
                "\"WORK_NO\" TEXT," + // 5: workNo
                "\"MOBILE_PHONE\" TEXT," + // 6: mobilePhone
                "\"EMAIL\" TEXT," + // 7: email
                "\"FIRST_LETTER\" TEXT," + // 8: firstLetter
                "\"PHOTO_URL\" TEXT," + // 9: photoUrl
                "\"NAME_PINYIN\" TEXT," + // 10: namePinyin
                "\"DEPT_PINYIN\" TEXT," + // 11: deptPinyin
                "\"CARD_NO\" TEXT," + // 12: cardNo
                "\"UNIT_ID\" INTEGER);"); // 13: unitId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(4, unitName);
        }
 
        String technicalPost = entity.getTechnicalPost();
        if (technicalPost != null) {
            stmt.bindString(5, technicalPost);
        }
 
        String workNo = entity.getWorkNo();
        if (workNo != null) {
            stmt.bindString(6, workNo);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(7, mobilePhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(9, firstLetter);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(10, photoUrl);
        }
 
        String namePinyin = entity.getNamePinyin();
        if (namePinyin != null) {
            stmt.bindString(11, namePinyin);
        }
 
        String deptPinyin = entity.getDeptPinyin();
        if (deptPinyin != null) {
            stmt.bindString(12, deptPinyin);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(13, cardNo);
        }
 
        Integer unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(14, unitId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(4, unitName);
        }
 
        String technicalPost = entity.getTechnicalPost();
        if (technicalPost != null) {
            stmt.bindString(5, technicalPost);
        }
 
        String workNo = entity.getWorkNo();
        if (workNo != null) {
            stmt.bindString(6, workNo);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(7, mobilePhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(9, firstLetter);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(10, photoUrl);
        }
 
        String namePinyin = entity.getNamePinyin();
        if (namePinyin != null) {
            stmt.bindString(11, namePinyin);
        }
 
        String deptPinyin = entity.getDeptPinyin();
        if (deptPinyin != null) {
            stmt.bindString(12, deptPinyin);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(13, cardNo);
        }
 
        Integer unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(14, unitId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // unitName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // technicalPost
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // workNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobilePhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // firstLetter
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // photoUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // namePinyin
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deptPinyin
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // cardNo
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // unitId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnitName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTechnicalPost(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWorkNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobilePhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFirstLetter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhotoUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNamePinyin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeptPinyin(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCardNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnitId(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contact entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
